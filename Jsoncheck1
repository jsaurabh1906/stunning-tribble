/**
 * smartJsonCheck
 * --------------
 * Accepts EITHER a raw JSON string OR an already-parsed JS value.
 * Returns a uniform result object.
 *
 *  • If given a string ➜ tries JSON.parse().
 *  • If given an object/array/value ➜ tries JSON.stringify() then JSON.parse().
 *
 * @param {any} input
 * @returns {{
 *   valid: boolean,
 *   parsed?: any,      // The safely-parsed value (if valid)
 *   error?: string     // Reason when valid === false
 * }}
 */
export function smartJsonCheck(input) {
  // -------------------------------
  // Case 1: input is a STRING
  // -------------------------------
  if (typeof input === "string") {
    try {
      const parsed = JSON.parse(input);
      return { valid: true, parsed };
    } catch (err) {
      return { valid: false, error: "String is not valid JSON: " + err.message };
    }
  }

  // -------------------------------
  // Case 2: input is *not* a string → try to serialise
  // -------------------------------
  try {
    const serialised = JSON.stringify(input);
    if (serialised === undefined) {
      // Happens for `undefined`, functions, symbols at the top level
      throw new Error("Value cannot be serialised (JSON.stringify returned undefined)");
    }

    // Round-trip parse to ensure it really *is* JSON-safe
    const parsed = JSON.parse(serialised);
    return { valid: true, parsed };
  } catch (err) {
    return { valid: false, error: "Value is not JSON-serialisable: " + err.message };
  }
}



==========÷÷÷÷÷÷÷÷÷÷÷÷
const tasks = [
  {
    taskId: "t1",
    title: "Design Mockups",
    assignedTo: "Alice",
    status: "In Progress"
  }
];

const result = smartJsonCheck(tasks);

console.log(result.valid);     // → true
console.log(result.parsed);    // → your original array, round-tripped
====================

const badJson = '{ "title": "Design "Mockups" }';  // unescaped quotes

console.log(smartJsonCheck(badJson));
// ➜ { valid: false, error: 'String is not valid JSON: Unexpected string in JSON at position 17' }
