import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import QEAssistMultiSelectOptionTooltip from './QEAssistMultiSelectOptionTooltip';

// Mock only react-select components since we need to test integration with them
jest.mock('react-select', () => ({
  components: {
    MultiValueLabel: React.forwardRef(({ children, data, ...props }, ref) => (
      <span 
        data-testid="react-select-multi-value-label" 
        data-value={data?.value}
        ref={ref}
        {...props}
      >
        {children}
      </span>
    )),
  },
}));

describe('QEAssistMultiSelectOptionTooltip', () => {
  const mockData = {
    value: 'test-option',
    label: 'Test Option',
    description: 'This is a test option with a detailed description',
    tooltip: 'This is tooltip text',
  };

  const defaultProps = {
    children: 'Test Option Label',
    data: mockData,
  };

  describe('Component Integration with Design System', () => {
    it('integrates with design system Tooltip component', () => {
      render(<QEAssistMultiSelectOptionTooltip {...defaultProps} />);
      
      // The design system Tooltip should be rendered
      // We don't mock it, so we test that our component structure is correct
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('integrates with react-select MultiValueLabel component', () => {
      render(<QEAssistMultiSelectOptionTooltip {...defaultProps} />);
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toBeInTheDocument();
      expect(multiValueLabel).toHaveAttribute('data-value', 'test-option');
      expect(multiValueLabel).toHaveTextContent('Test Option Label');
    });

    it('passes through additional props to react-select component', () => {
      const additionalProps = {
        className: 'custom-class',
        'data-testid': 'custom-test-id',
        style: { color: 'red' },
      };
      
      render(
        <QEAssistMultiSelectOptionTooltip 
          {...defaultProps} 
          {...additionalProps}
        />
      );
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toHaveClass('custom-class');
      expect(multiValueLabel).toHaveAttribute('data-testid', 'custom-test-id');
      expect(multiValueLabel).toHaveStyle({ color: 'red' });
    });
  });

  describe('Tooltip Content Logic', () => {
    it('uses description as tooltip content when available', () => {
      const propsWithDescription = {
        ...defaultProps,
        data: {
          ...mockData,
          description: 'Primary description text',
          tooltip: 'Secondary tooltip text',
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithDescription} />);
      
      // Component should render successfully with description taking precedence
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('falls back to tooltip property when description is not available', () => {
      const propsWithoutDescription = {
        ...defaultProps,
        data: {
          ...mockData,
          description: undefined,
          tooltip: 'Fallback tooltip text',
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithoutDescription} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('falls back to children when neither description nor tooltip is available', () => {
      const propsWithoutTooltipData = {
        ...defaultProps,
        data: {
          ...mockData,
          description: undefined,
          tooltip: undefined,
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithoutTooltipData} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('handles empty description by falling back to tooltip', () => {
      const propsWithEmptyDescription = {
        ...defaultProps,
        data: {
          ...mockData,
          description: '',
          tooltip: 'Fallback tooltip',
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithEmptyDescription} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('handles empty tooltip by falling back to children', () => {
      const propsWithEmptyTooltip = {
        ...defaultProps,
        data: {
          ...mockData,
          description: undefined,
          tooltip: '',
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithEmptyTooltip} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });
  });

  describe('Data Handling Edge Cases', () => {
    it('handles null data gracefully', () => {
      const propsWithNullData = {
        ...defaultProps,
        data: null,
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithNullData} />);
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toBeInTheDocument();
      expect(multiValueLabel).toHaveTextContent('Test Option Label');
    });

    it('handles undefined data gracefully', () => {
      const propsWithUndefinedData = {
        ...defaultProps,
        data: undefined,
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithUndefinedData} />);
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toBeInTheDocument();
      expect(multiValueLabel).toHaveTextContent('Test Option Label');
    });

    it('handles empty data object gracefully', () => {
      const propsWithEmptyData = {
        ...defaultProps,
        data: {},
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithEmptyData} />);
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toBeInTheDocument();
      expect(multiValueLabel).toHaveTextContent('Test Option Label');
    });

    it('handles data with only some properties', () => {
      const propsWithPartialData = {
        ...defaultProps,
        data: {
          value: 'partial-option',
          label: 'Partial Option',
          // No description or tooltip
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithPartialData} />);
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toBeInTheDocument();
      expect(multiValueLabel).toHaveAttribute('data-value', 'partial-option');
    });

    it('handles data with extra properties', () => {
      const propsWithExtraData = {
        ...defaultProps,
        data: {
          ...mockData,
          extraProperty: 'This should not break anything',
          anotherProperty: { nested: 'object' },
        },
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithExtraData} />);
      
      const multiValueLabel = screen.getByTestId('react-select-multi-value-label');
      expect(multiValueLabel).toBeInTheDocument();
      expect(multiValueLabel).toHaveAttribute('data-value', 'test-option');
    });
  });

  describe('Children Handling', () => {
    it('renders string children correctly', () => {
      const propsWithStringChildren = {
        ...defaultProps,
        children: 'Simple string content',
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithStringChildren} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toHaveTextContent('Simple string content');
    });

    it('renders React element children correctly', () => {
      const propsWithElementChildren = {
        ...defaultProps,
        children: <span data-testid="custom-child">Custom Element</span>,
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithElementChildren} />);
      
      expect(screen.getByTestId('custom-child')).toHaveTextContent('Custom Element');
    });

    it('handles complex nested children', () => {
      const propsWithComplexChildren = {
        ...defaultProps,
        children: (
          <div>
            <span data-testid="child-span">Nested</span>
            <strong data-testid="child-strong">Content</strong>
          </div>
        ),
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithComplexChildren} />);
      
      expect(screen.getByTestId('child-span')).toHaveTextContent('Nested');
      expect(screen.getByTestId('child-strong')).toHaveTextContent('Content');
    });

    it('handles null children gracefully', () => {
      const propsWithNullChildren = {
        ...defaultProps,
        children: null,
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithNullChildren} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('handles undefined children gracefully', () => {
      const propsWithUndefinedChildren = {
        ...defaultProps,
        children: undefined,
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithUndefinedChildren} />);
      
      expect(screen.getByTestId('react-select-multi-value-label')).toBeInTheDocument();
    });

    it('handles empty string children', () => {
      const propsWithEmptyChildren = {
        ...defaultProps,
        children: '',
      };
      
      render(<QEAssistMultiSelectOptionTooltip {...propsWithEmptyChildren} />);
