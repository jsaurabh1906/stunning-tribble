/**
 * @jest-environment jsdom
 */
/* eslint-disable react/prop-types */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Formik } from 'formik';
import ArtifactFilterSection, {
  useArtifactFilterSectionEffects,
} from '../ArtifactFilterSection';
import { renderHook } from '@testing-library/react-hooks';

// ————————————————
// M O C K S
// ————————————————

jest.mock('react-redux', () => ({
  useSelector: jest.fn(() => ({ oneApiUrl: 'https://fake.api' })),
}));

jest.mock('../../../hooks/useAuthData', () => ({
  __esModule: true,
  useUserData: jest.fn(() => ({
    userEmail: 'test@domain.com',
  })),
}));

jest.mock('fetchye', () => ({
  __esModule: true,
  useFetchye: jest.fn(() => ({
    data: undefined,
    isLoading: false,
    run: jest.fn(),
  })),
}));

const mockGetArtifactQEData = jest.fn();
const mockIsArtifactLoading = jest.fn(() => false);
jest.mock('../../../hooks/qeassist/useArtifactQeDataApi', () => ({
  __esModule: true,
  default: jest.fn(() => ({
    isArtifactQEApiLoading: mockIsArtifactLoading,
    getArtifactQEData: mockGetArtifactQEData,
  })),
}));

jest.mock('@americanexpress/dls-react', () => ({
  __esModule: true,
  FilterPersistent: ({ children }) => (
    <div data-testid="FilterPersistent">{children}</div>
  ),
  Label: ({ children, htmlFor }) => (
    <label htmlFor={htmlFor}>{children}</label>
  ),
  RadioGroup: ({ children }) => <div role="radiogroup">{children}</div>,
  RadioButton: ({ label, ...props }) => (
    <input type="radio" aria-label={label} {...props} />
  ),
}));

// ————————————————
// H E L P E R S
// ————————————————

const flushPromises = () => new Promise(setImmediate);

const renderWithFormik = (props = {}) =>
  render(
    <Formik
      initialValues={{
        organization: '',
        product: '',
        pi: [],
        epic: '',
        locateBy: 'Product',
      }}
      onSubmit={jest.fn()}
    >
      {(formik) => (
        <ArtifactFilterSection
          onFormikRef={() => {}}
          clearArtifactOptions={jest.fn()}
          filterValueListener={jest.fn()}
          {...props}
        />
      )}
    </Formik>
  );

// ————————————————
//  H O O K   T E S T S
// ————————————————

describe('useArtifactFilterSectionEffects', () => {
  it('calls setPayload on Product path', () => {
    const setPayload = jest.fn();
    const filterValues = {
      locateBy: 'Product',
      organization: { value: 'ORG-1' },
      product: { value: 'PROD-1' },
      pi: [{ value: 'PI-1' }],
      epic: { value: '' },
    };

    renderHook(() =>
      useArtifactFilterSectionEffects({ filterValues, setPayload })
    );

    expect(setPayload).toHaveBeenCalledWith({
      apiName: 'getOrgProductFeatureApi',
      orgName: ['ORG-1'],
      selectedPI: ['PI-1'],
      product: 'PROD-1',
    });
  });

  it('calls setPayload on Epic path', () => {
    const setPayload = jest.fn();
    const filterValues = {
      locateBy: 'Epic',
      organization: { value: 'ORG-2' },
      product: { value: '' },
      pi: [{ value: 'PI-2' }],
      epic: { value: 'EPIC-99' },
    };

    renderHook(() =>
      useArtifactFilterSectionEffects({ filterValues, setPayload })
    );

    expect(setPayload).toHaveBeenCalledWith({
      apiName: 'getEpicFeatureApi',
      orgName: 'GMST',
      selectedPI: ['PI-2'],
      epicId: 'EPIC-99',
    });
  });
});

// ————————————————
//  C O M P O N E N T   T E S T S
// ————————————————

describe('<ArtifactFilterSection />', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    require('react-redux').useSelector.mockReturnValue({
      oneApiUrl: 'https://fake.api',
    });
    require('fetchye').useFetchye.mockReturnValue({
      data: undefined,
      isLoading: false,
      run: jest.fn(),
    });
  });

  it('renders organization selector and Product radio by default', () => {
    renderWithFormik();

    expect(screen.getByLabelText(/Organization/)).toBeInTheDocument();
    expect(
      screen.getByRole('radio', { name: 'Product' })
    ).toBeChecked();
  });

  it('toggles to Epic and shows Epic dropdown', async () => {
    renderWithFormik();

    fireEvent.click(screen.getByRole('radio', { name: 'Epic' }));
    await waitFor(() =>
      expect(screen.getByLabelText(/Epic/)).toBeInTheDocument()
    );
    expect(screen.queryByLabelText(/Product/)).not.toBeInTheDocument();
  });

  it('calls fetchye.run on organization change', async () => {
    const mockRun = jest.fn();
    require('fetchye').useFetchye.mockReturnValue({
      data: undefined,
      isLoading: false,
      run: mockRun,
    });

    renderWithFormik();
    fireEvent.change(screen.getByLabelText(/Organization/), {
      target: { value: 'ORG-1' },
    });
    await flushPromises();

    expect(mockRun).toHaveBeenCalledWith(
      expect.objectContaining({
        url: expect.stringContaining('/qeData'),
      })
    );
  });

  it('calls getArtifactQEData on Epic selection', async () => {
    renderWithFormik();

    fireEvent.click(screen.getByRole('radio', { name: 'Epic' }));
    await waitFor(() =>
      expect(screen.getByLabelText(/Epic/)).toBeInTheDocument()
    );

    fireEvent.change(screen.getByLabelText(/Epic/), {
      target: { value: 'EPIC-1' },
    });
    await flushPromises();

    expect(mockGetArtifactQEData).toHaveBeenCalled();
  });

  it('renders PI dropdown after selecting organization & product', async () => {
    const fakeFetch = {
      data: { body: { PI_List: ['PI-A', 'PI-B'] } },
      isLoading: false,
      run: jest.fn(),
    };
    require('fetchye').useFetchye.mockReturnValue(fakeFetch);

    renderWithFormik();

    fireEvent.change(screen.getByLabelText(/Organization/), {
      target: { value: 'ORG-A' },
    });
    await flushPromises();

    expect(screen.getByLabelText(/Product/)).toBeInTheDocument();

    fireEvent.change(screen.getByLabelText(/Product/), {
      target: { value: 'PROD-A' },
    });
    await flushPromises();

    expect(screen.getByLabelText(/PI/)).toBeInTheDocument();
  });
});

=======================================

jest.mock('@/components/qeassist/common/QEAssistMultiSelect', () => ({
  __esModule: true,
  default: ({ label, handleChange }) => (
    <select aria-label={label} onChange={(e) => handleChange(e.target.value)}>
      <option value="PI-1">PI-1</option>
      <option value="PI-2">PI-2</option>
    </select>
  ),
}));

it('calls handlePiChange when PI is selected', async () => {
  const mockRun = jest.fn(() =>
    Promise.resolve({
      data: {
        body: {
          PI_List: ['PI-1', 'PI-2'],
        },
      },
    })
  );

  require('fetchye').useFetchye.mockReturnValue({
    data: undefined,
    isLoading: false,
    run: mockRun,
  });

  renderWithFormik();

  // Select org/product to trigger PI fetch
  fireEvent.change(screen.getByLabelText(/Organization/), {
    target: { value: 'ORG-A' },
  });

  fireEvent.change(screen.getByLabelText(/Product/), {
    target: { value: 'PROD-A' },
  });

  // Wait until PI dropdown is present
  await waitFor(() => {
    expect(screen.getByLabelText(/PI/)).toBeInTheDocument();
  });

  // Select a PI value
  fireEvent.change(screen.getByLabelText(/PI/), {
    target: { value: 'PI-1' },
  });

  // Optional: check if a side-effect happened (like onLmDataUpdate or formik.setFieldValue)
});
44444444444444444444444444444444444

import React from 'react';
import { render, fireEvent, waitFor } from '@testing-library/react';
import ArtifactFilterSection from '../ArtifactFilterSection';
import '@testing-library/jest-dom';

describe('ArtifactFilterSection - Clear Options Functionality', () => {
  let mockClearArtifactOptions;
  let mockFilterValueListener;
  let mockOnFormik;

  beforeEach(() => {
    mockClearArtifactOptions = jest.fn();
    mockFilterValueListener = jest.fn();
    mockOnFormik = jest.fn();
  });

  const setup = () =>
    render(
      <ArtifactFilterSection
        clearArtifactOptions={mockClearArtifactOptions}
        filterValueListener={mockFilterValueListener}
        onFormik={mockOnFormik}
      />
    );

  it('should call clearArtifactOptions when reset is triggered from parent', async () => {
    const { rerender } = setup();

    // simulate parent calling clearArtifactOptions after reset
    mockClearArtifactOptions();

    await waitFor(() => {
      expect(mockClearArtifactOptions).toHaveBeenCalled();
    });

    // Optionally: rerender with cleared values
    rerender(
      <ArtifactFilterSection
        clearArtifactOptions={mockClearArtifactOptions}
        filterValueListener={mockFilterValueListener}
        onFormik={mockOnFormik}
      />
    );
  });

  it('should clear organization dropdown when clearArtifactOptions is called', async () => {
    const { getByLabelText } = setup();

    const orgSelect = getByLabelText(/Organization/i);
    fireEvent.change(orgSelect, { target: { value: 'Test Org' } });

    expect(orgSelect.value).toBe('Test Org');

    // simulate clearing
    mockClearArtifactOptions();

    await waitFor(() => {
      expect(mockClearArtifactOptions).toHaveBeenCalled();
      expect(orgSelect.value).toBe(''); // expect cleared
    });
  });

  it('should clear product, epic, and pi dropdowns when clearArtifactOptions is invoked', async () => {
    const { getByLabelText } = setup();

    const productSelect = getByLabelText(/Product/i);
    const epicSelect = getByLabelText(/Epic/i);
    const piSelect = getByLabelText(/PI/i);

    fireEvent.change(productSelect, { target: { value: 'Test Product' } });
    fireEvent.change(epicSelect, { target: { value: 'Test Epic' } });
    fireEvent.change(piSelect, { target: { value: 'Test PI' } });

    expect(productSelect.value).toBe('Test Product');
    expect(epicSelect.value).toBe('Test Epic');
    expect(piSelect.value).toBe('Test PI');

    // simulate clearing
    mockClearArtifactOptions();

    await waitFor(() => {
      expect(productSelect.value).toBe('');
      expect(epicSelect.value).toBe('');
      expect(piSelect.value).toBe('');
    });
  });
});


import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import ArtifactFilterSection from '../ArtifactFilterSection';

// Mock props
const mockFilterValueListener = jest.fn();
const mockOnFormik = jest.fn();

function WrapperComponent() {
  const [resetToggle, setResetToggle] = React.useState(false);

  const handleReset = () => {
    setResetToggle((prev) => !prev); // toggle to simulate clear
  };

  return (
    <>
      <button onClick={handleReset}>Reset</button>
      <ArtifactFilterSection
        clearArtifactOptions={() => {
          // Simulate the parent's clear logic
        }}
        filterValueListener={mockFilterValueListener}
        onFormik={mockOnFormik}
      />
    </>
  );
}

// Helper to select react-select option
const selectOption = async (labelText, optionText) => {
  const label = screen.getByText(labelText);
  const input = label.nextSibling?.querySelector('input'); // for react-select input

  if (!input) throw new Error('Could not find input for select');

  fireEvent.focus(input);
  fireEvent.keyDown(input, { key: 'ArrowDown' });

  const option = await screen.findByText(optionText);
  fireEvent.click(option);
};

test('clears select fields after reset is triggered', async () => {
  render(<WrapperComponent />);

  // Select values
  await selectOption('Product', 'Product A');
  await selectOption('Epic', 'Epic X');
  await selectOption('PI', 'PI 1');

  // Confirm selection exists
  expect(screen.queryByText('Product A')).not.toBeNull();
  expect(screen.queryByText('Epic X')).not.toBeNull();
  expect(screen.queryByText('PI 1')).not.toBeNull();

  // Click Reset
  fireEvent.click(screen.getByText('Reset'));

  // Wait and assert values are cleared
  await waitFor(() => {
    expect(screen.queryByText('Product A')).toBeNull();
    expect(screen.queryByText('Epic X')).toBeNull();
    expect(screen.queryByText('PI 1')).toBeNull();
  });
});
