import React, { useState } from 'react';
import styled from 'styled-components';

// Styled Components
const Container = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  background-color: #f5f5f5;
  min-height: 100vh;
`;

const Header = styled.h1`
  color: #333;
  text-align: center;
  margin-bottom: 30px;
  font-size: 2.5rem;
  font-weight: 600;
`;

const Section = styled.div`
  background: white;
  border-radius: 12px;
  padding: 24px;
  margin-bottom: 24px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid #e0e0e0;
`;

const SectionTitle = styled.h2`
  color: #2c3e50;
  margin-bottom: 20px;
  font-size: 1.5rem;
  font-weight: 600;
  border-bottom: 2px solid #3498db;
  padding-bottom: 8px;
`;

const DetailRow = styled.div`
  margin-bottom: 16px;
  display: flex;
  flex-direction: column;
  gap: 8px;
`;

const Label = styled.span`
  font-weight: 600;
  color: #34495e;
  font-size: 0.95rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
`;

const Value = styled.div`
  color: #2c3e50;
  font-size: 1rem;
  line-height: 1.5;
  padding: 12px;
  background-color: #f8f9fa;
  border-radius: 6px;
  border-left: 4px solid #3498db;
`;

const QAItem = styled.div`
  margin-bottom: 20px;
  padding: 16px;
  background-color: #f8f9fa;
  border-radius: 8px;
  border-left: 4px solid #e74c3c;
`;

const Question = styled.div`
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 8px;
  font-size: 1rem;
`;

const Answer = styled.div`
  color: #34495e;
  font-size: 0.95rem;
  line-height: 1.5;
  padding-left: 16px;
  border-left: 2px solid #bdc3c7;
  margin-left: 8px;
`;

const QuestionSetItem = styled.div`
  margin-bottom: 16px;
  padding: 16px;
  background-color: #f1f2f6;
  border-radius: 8px;
  border-left: 4px solid #27ae60;
`;

const QuestionNumber = styled.span`
  font-weight: 600;
  color: #27ae60;
  font-size: 0.9rem;
  margin-right: 8px;
`;

const QuestionText = styled.div`
  font-weight: 600;
  color: #2c3e50;
  margin-bottom: 8px;
  font-size: 0.95rem;
`;

const AnswerText = styled.div`
  color: #34495e;
  font-size: 0.9rem;
  line-height: 1.4;
  padding-left: 16px;
  border-left: 2px solid #95a5a6;
  margin-left: 8px;
`;

const ConfirmationSection = styled.div`
  background: white;
  border-radius: 12px;
  padding: 24px;
  margin-bottom: 24px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  border: 1px solid #e0e0e0;
  text-align: center;
`;

const ConfirmationText = styled.h3`
  color: #2c3e50;
  margin-bottom: 24px;
  font-size: 1.3rem;
  font-weight: 600;
`;

const ButtonContainer = styled.div`
  display: flex;
  gap: 16px;
  justify-content: center;
  margin-bottom: 20px;
`;

const Button = styled.button`
  padding: 12px 24px;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 100px;
  
  &:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }
`;

const YesButton = styled(Button)`
  background-color: #27ae60;
  color: white;
  
  &:hover {
    background-color: #219a52;
  }
`;

const NoButton = styled(Button)`
  background-color: #e74c3c;
  color: white;
  
  &:hover {
    background-color: #c0392b;
  }
`;

const SubmitButton = styled(Button)`
  background-color: #3498db;
  color: white;
  
  &:hover {
    background-color: #2980b9;
  }
`;

const EditableTextArea = styled.textarea`
  width: 100%;
  min-height: 80px;
  padding: 12px;
  border: 2px solid #bdc3c7;
  border-radius: 6px;
  font-size: 0.9rem;
  line-height: 1.4;
  font-family: inherit;
  resize: vertical;
  
  &:focus {
    outline: none;
    border-color: #3498db;
  }
`;

const EditableAnswerContainer = styled.div`
  padding-left: 16px;
  margin-left: 8px;
`;

const NextPageContainer = styled.div`
  background: #2c3e50;
  color: white;
  border-radius: 12px;
  padding: 40px;
  text-align: center;
  font-size: 1.5rem;
  font-weight: 600;
`;

const FeatureDetailsPage = () => {
  const [showConfirmation, setShowConfirmation] = useState(true);
  const [editMode, setEditMode] = useState(false);
  const [submitted, setSubmitted] = useState(false);
  const [editableAnswers, setEditableAnswers] = useState({});

  // Dummy feature details based on the image
  const featureDetails = {
    featureId: "F614965",
    featureName: "SPACE - APAC NPE Rejections Rules One.force signings - 2024 SIP",
    organization: "undefined",
    product: "undefined",
    enhancedScore: "",
    betaId: "undefined",
    currentScore: "7.01",
    docIds: [],
    enhancedAcceptanceCriteria: "1. Automatic Rejection of Non-Compliant Expansions:\n – NPE and EPE wins must be automatically rejected if declared after the 13-month alignment with the 2024 Strategy focus on acquiring \"New Clients\" signings. The feature aims to enforce compliance by systematically identifying and rejecting non-compliant expansion wins declared by Sales& Corporate Payments team.",
    featureAcceptanceCriteria: "Automatically reject Expansion wins declared by Sales& Corporate Payments team -Expansions are not allowed after the customer's initial 13-month alignment with the New Client strategy",
    featureContainerName: "E_GCS One Commercial Data & Incentives (GOCI)_JIRA",
    featureDescription: "In 2024, \\Sales Focus on New' requires sales function colleagues to focus on New Client signings only. Expansions declarations are not permitted",
    featureObjectId: "732383908181",
    featureReference: "https://rally1.rallydev.com/sim/webservice/v2.0/portfolioitem/feature/732383908181",
    featureType: ""
  };

  const botQA = {
    question: "What is the exact definition of '[REDACTED] Status_ be calculated or updated in different scenarios?'",
    answer: "The exact definition and calculation scenarios for the redacted status are not provided in the available documentation. Please refer to the technical specifications for detailed information."
  };

  const [questionSet, setQuestionSet] = useState([
    {
      questionNumber: 1,
      question: "What is the exact definition of '[REDACTED] Status_ be calculated or updated in different scenarios?'",
      answer: "The system should handle status calculations based on predefined business rules and scenarios outlined in the technical requirements."
    },
    {
      questionNumber: 2,
      question: "Can you clarify the technical requirements for integration overrides into SPACE and ONE.force systems?",
      answer: "Integration overrides require proper authentication, validation, and error handling mechanisms to ensure data integrity across systems."
    },
    {
      questionNumber: 3,
      question: "How should the system handle scenarios where there_id this logic be configurable for future use?",
      answer: "The system should implement configurable business rules that can be modified without code changes, using a rule engine approach."
    },
    {
      questionNumber: 4,
      question: "What is the rationale for excluding Australia and <? Are there any plans to revisit this exclusion?",
      answer: "The exclusion is based on regional compliance requirements and market-specific regulations. Future inclusion depends on regulatory alignment."
    },
    {
      questionNumber: 5,
      question: "How should the system handle cases where a 'New Client' Should there be a configurable grace period?",
      answer: "The system should implement a configurable grace period with appropriate notifications and escalation procedures for edge cases."
    }
  ]);

  const handleYes = () => {
    setSubmitted(true);
    setShowConfirmation(false);
  };

  const handleNo = () => {
    setEditMode(true);
    setShowConfirmation(false);
    // Initialize editable answers
    const initialAnswers = {};
    questionSet.forEach(item => {
      initialAnswers[item.questionNumber] = item.answer;
    });
    setEditableAnswers(initialAnswers);
  };

  const handleAnswerChange = (questionNumber, newAnswer) => {
    setEditableAnswers(prev => ({
      ...prev,
      [questionNumber]: newAnswer
    }));
  };

  const handleSubmit = () => {
    // Update the questionSet with edited answers
    const updatedQuestionSet = questionSet.map(item => ({
      ...item,
      answer: editableAnswers[item.questionNumber] || item.answer
    }));
    setQuestionSet(updatedQuestionSet);
    setSubmitted(true);
    setEditMode(false);
  };

  if (submitted) {
    return (
      <Container>
        <NextPageContainer>
          <div>✅ Information Submitted Successfully!</div>
          <div style={{ fontSize: '1rem', marginTop: '20px', opacity: '0.8' }}>
            Proceeding to next page... (Console log shows submitted data)
          </div>
        </NextPageContainer>
      </Container>
    );
  }

  return (
    <Container>
      <Header>Feature Details</Header>
      
      {/* Section 1: Feature Basic Information */}
      <Section>
        <SectionTitle>Feature Information</SectionTitle>
        
        <DetailRow>
          <Label>Feature ID</Label>
          <Value>{featureDetails.featureId}</Value>
        </DetailRow>
        
        <DetailRow>
          <Label>Feature Name</Label>
          <Value>{featureDetails.featureName}</Value>
        </DetailRow>
        
        <DetailRow>
          <Label>Description</Label>
          <Value>{featureDetails.featureDescription}</Value>
        </DetailRow>
        
        <DetailRow>
          <Label>Acceptance Criteria</Label>
          <Value>{featureDetails.featureAcceptanceCriteria}</Value>
        </DetailRow>
        
        <DetailRow>
          <Label>Enhanced Acceptance Criteria</Label>
          <Value>{featureDetails.enhancedAcceptanceCriteria}</Value>
        </DetailRow>
        
        <DetailRow>
          <Label>Current Score</Label>
          <Value>{featureDetails.currentScore}</Value>
        </DetailRow>
        
        <DetailRow>
          <Label>Container Name</Label>
          <Value>{featureDetails.featureContainerName}</Value>
        </DetailRow>
      </Section>

      {/* Section 2: Bot Q&A */}
      <Section>
        <SectionTitle>Bot Q&A</SectionTitle>
        
        <QAItem>
          <Question>Q: {botQA.question}</Question>
          <Answer>A: {botQA.answer}</Answer>
        </QAItem>
      </Section>

      {/* Section 3: Question Set */}
      <Section>
        <SectionTitle>Question Set</SectionTitle>
        
        {questionSet.map((item, index) => (
          <QuestionSetItem key={index}>
            <QuestionText>
              <QuestionNumber>Q{item.questionNumber}:</QuestionNumber>
              {item.question}
            </QuestionText>
            {editMode ? (
              <EditableAnswerContainer>
                <EditableTextArea
                  value={editableAnswers[item.questionNumber] || item.answer}
                  onChange={(e) => handleAnswerChange(item.questionNumber, e.target.value)}
                  placeholder="Enter your answer here..."
                />
              </EditableAnswerContainer>
            ) : (
              <AnswerText>A: {item.answer}</AnswerText>
            )}
          </QuestionSetItem>
        ))}
        
        {editMode && (
          <div style={{ textAlign: 'center', marginTop: '20px' }}>
            <SubmitButton onClick={handleSubmit}>
              Submit Updated Information
            </SubmitButton>
          </div>
        )}
      </Section>

      {/* Confirmation Section */}
      {showConfirmation && (
        <ConfirmationSection>
          <ConfirmationText>
            Are you sure you want to submit this information?
          </ConfirmationText>
          <ButtonContainer>
            <YesButton onClick={handleYes}>Yes</YesButton>
            <NoButton onClick={handleNo}>No</NoButton>
          </ButtonContainer>
        </ConfirmationSection>
      )}
    </Container>
  );
};

export default FeatureDetailsPage;
