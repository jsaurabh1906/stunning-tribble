import { renderHook, act, waitFor } from '@testing-library/react';
import useScoringApi from '../useScoringApi'; // adjust path as needed

import { useSelector } from 'react-redux';
import { useFetchye } from 'fetchye';
import { logEvent } from '../../../util/logger';

// ðŸ§ª Mock dependencies
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

jest.mock('fetchye', () => ({
  useFetchye: jest.fn(),
}));

jest.mock('../../../util/logger', () => ({
  logEvent: jest.fn(),
}));

jest.mock('../../../constants', () => ({
  FETCHYE_OPTIONS: {},
}));

describe('useScoringApi', () => {
  const mockUrl = 'http://mock-api';
  const eventDetails = { event: 'QE_Test' };

  beforeEach(() => {
    jest.clearAllMocks();
    useSelector
      .mockReturnValueOnce(mockUrl) // qeAssistUrl
      .mockReturnValueOnce({});     // ELFEndpoints
  });

  it('calls correct API URL and payload for story type', () => {
    const runMock = jest.fn();
    useFetchye.mockReturnValue({
      isLoading: false,
      data: null,
      run: runMock,
    });

    const llmPayload = [{ user_story_id: 'story1' }];

    renderHook(() =>
      useScoringApi({
        artifactType: 'story',
        llmPayload,
        eventDetails,
      })
    );

    expect(useFetchye).toHaveBeenCalledWith(
      expect.objectContaining({
        url: `${mockUrl}/api/analyze/story`,
        method: 'POST',
        body: JSON.stringify({ user_stories: llmPayload }),
      })
    );
  });

  it('calls correct API URL and payload for feature type', () => {
    const runMock = jest.fn();
    useFetchye.mockReturnValue({
      isLoading: false,
      data: null,
      run: runMock,
    });

    const llmPayload = [{ feature_id: 'feature1' }];

    renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload,
        eventDetails,
      })
    );

    expect(useFetchye).toHaveBeenCalledWith(
      expect.objectContaining({
        url: `${mockUrl}/api/analyze/feature`,
        method: 'POST',
        body: JSON.stringify({ features: llmPayload }),
      })
    );
  });

  it('calls setLmResponse with merged scored data', async () => {
    const setLmResponse = jest.fn();

    const scoringData = {
      status: 200,
      body: {
        Feature_Analysis: [
          { feature_id: 'feature1', score: 0.85 },
        ],
      },
    };

    useFetchye.mockReturnValue({
      isLoading: false,
      data: scoringData,
      run: jest.fn(),
    });

    const llmPayload = [{ feature_id: 'feature1' }];

    renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload,
        eventDetails,
        setLmResponse,
      })
    );

    await waitFor(() =>
      expect(setLmResponse).toHaveBeenCalledWith([
        expect.objectContaining({
          feature_id: 'feature1',
          score: 0.85,
        }),
      ])
    );
  });

  it('calls setLmResponse with error scores on API failure', async () => {
    const setLmResponse = jest.fn();

    useFetchye.mockReturnValue({
      isLoading: false,
      data: { status: 500 },
      run: jest.fn(),
    });

    const llmPayload = [{ feature_id: 'feature1' }];

    renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload,
        eventDetails,
        setLmResponse,
      })
    );

    await waitFor(() =>
      expect(setLmResponse).toHaveBeenCalledWith([
        expect.objectContaining({ score: 'error' }),
      ])
    );
  });

  it('sets loading state using getScoring()', async () => {
    const runMock = jest.fn();
    const setLmResponse = jest.fn();

    useFetchye.mockReturnValue({
      isLoading: false,
      data: null,
      run: runMock,
    });

    const llmPayload = [{ feature_id: 'feature1' }];

    const { result } = renderHook(() =>
      useScoringApi({
        artifactType: 'feature',
        llmPayload,
        eventDetails,
        setLmResponse,
      })
    );

    await act(async () => {
      await result.current.getScoring();
    });

    expect(setLmResponse).toHaveBeenCalled();
    expect(runMock).toHaveBeenCalled();
  });

  it('logs scoring event when data is received', async () => {
    const setLmResponse = jest.fn();

    const scoringData = {
      status: 200,
      body: {
        user_story_analysis: [
          { user_story_id: 'us1', score: 0.5 },
        ],
      },
    };

    useFetchye.mockReturnValue({
      isLoading: false,
      data: scoringData,
      run: jest.fn(),
    });

    useSelector
      .mockReturnValueOnce(mockUrl)
      .mockReturnValueOnce({})
      .mockReturnValueOnce({ code: 'org1' }) // activeOrg
      .mockReturnValueOnce({ adSid: 'user1' }); // user

    const llmPayload = [{ user_story_id: 'us1' }];

    renderHook(() =>
      useScoringApi({
        artifactType: 'story',
        llmPayload,
        eventDetails,
        setLmResponse,
      })
    );

    await waitFor(() => {
      expect(logEvent).toHaveBeenCalledWith(
        expect.objectContaining({
          storyId: ['us1'],
          score: [0.5],
        }),
        'INFO',
        undefined
      );
    });
  });
});
